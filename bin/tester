#!/usr/bin/env php
<?php
/**
 * TODO this is a very preliminary version of a binary file - pending some research
 * into best practices for binary files and loading autoloader / locating working directory
 */

use Phlegmatic\Tester\Runner\CommandLine\CommandLineOptions;
use Phlegmatic\Tester\Runner\FailedTestsException;
use Phlegmatic\Tester\Runner\Factory\CommandLineOptionsFactory;
use Phlegmatic\Tester\Runner\Factory\RunnerFactory;

loadAutoLoader();

$composer_dir = getComposerDir();

$package_list = require_once $composer_dir . "/test.php";


$options = CommandLineOptions::createStandardOptions();

$factory = new CommandLineOptionsFactory(new RunnerFactory(), $options);

$runner = $factory->create();

try {
    $start = microtime(true);
    $runner->run($package_list);
    $stop = microtime(true);
} catch (FailedTestsException $exception) {
    exit($exception->getMessage() . "\n");
}

$time = number_format($stop - $start, 2);

exit("Finished in {$time}s\nS");

function loadAutoLoader(): void
{
    $vendor_dir = getVendorDirectory();

    $filename = $vendor_dir . "/autoload.php";

    if (!file_exists($filename)) {
        throw new \RuntimeException("Could not locate composer autoloader! - {$filename}");
    }

    require_once $filename;
}

function getVendorDirectory(): string
{
    $composer_config = getComposerConfig();

    $vendor_dir = $composer_config['config']['vendor-dir'] ?? getcwd() . "/vendor";

    return $vendor_dir;
}

function getComposerConfig(): array
{
    $directory = getComposerDir();

    $composer_json = file_get_contents($directory . "/composer.json");

    return json_decode($composer_json, true);
}

function getComposerDir(): string
{
    $directory = __DIR__;

    while (! file_exists($directory . "/composer.json")) {
        $prev_dir = $directory;
        $directory = dirname(__DIR__);

        if ($prev_dir == $directory) {
            throw new \RuntimeException("Failed to locate composer.json");
        }
    }

    return $directory;
}
